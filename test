#!python3
"""
Copyright 2021-2023 Salvatore Barone <salvatore.barone@unina.it>

This is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation; either version 3 of the License, or any later version.

This is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
more details.

You should have received a copy of the GNU General Public License along with
RMEncoder; if not, write to the Free Software Foundation, Inc., 51 Franklin
Street, Fifth Floor, Boston, MA 02110-1301, USA.
"""
import os, json5, pyamosa, numpy as np, matplotlib.pyplot as plt, click, datetime

from problems.metrics import *
from problems.BNH import *
from problems.OSY import *
from problems.TNK import *
from problems.ZDT1 import *
from problems.ZDT2 import *
from problems.ZDT3 import *
from problems.ZDT4 import *
from problems.ZDT6 import *
from problems.GenZDT1 import *
from problems.GenZDT2 import *
from problems.GenZDT3 import *
from problems.GenZDT4 import *
from problems.GenZDT6 import *
from problems.DTLZ1 import *
from problems.DTLZ2 import *



mop_problems = {"BNH": BNH(), "OSY": OSY(), "TNK": TNK(), "ZDT1": ZDT1(), "ZDT2": ZDT2(), "ZDT3": ZDT3(), "ZDT4": ZDT4(), "ZDT6": ZDT6()}
lsmop_problems = {"ZDT1": GenZDT1, "ZDT2": GenZDT2, "ZDT3" : GenZDT3, "ZDT4": GenZDT4, "ZDT6": GenZDT6, "DTLZ1": DTLZ1, "DTLZ2": DTLZ2}

@click.group()
def cli():
    pass


@cli.command('mopeval')
@click.argument('prob', type = click.Choice(list(mop_problems.keys())), required = True)
def mopeval(prob):
    problem = mop_problems[prob]
    opt = problem.optimums()
    archive = json5.load(open(f"{prob}_final_archive.json5"))
    real_pareto = np.array([s["f"] for s in opt])
    est_pareto = np.array([s["f"] for s in archive])
    axis_labels = ["f0", "f1"]
    plt.figure(figsize = (10, 10), dpi = 300)
    plt.plot(real_pareto[:, 0], real_pareto[:, 1], 'r.', label="Actual Pareto-front")
    plt.plot(est_pareto[:, 0], est_pareto[:, 1], 'b.', label="Estimation from AMOSA")
    plt.xlabel(axis_labels[0])
    plt.ylabel(axis_labels[1])
    plt.legend()
    plt.savefig(f"{prob}_pareto_comparison.pdf", bbox_inches = 'tight', pad_inches = 0)
    print(f"convergence: {convergence(real_pareto, est_pareto)}")
    print(f"dispersion: {dispersion(real_pareto, est_pareto)}")


@cli.command('mop')
@click.argument('problem', type = click.Choice(list(mop_problems.keys())), required = True)
@click.option('--hard', type = int, required = False, default = 100, help = 'Hard limit')
@click.option('--soft', type = int, required = False, default = 200, help = 'Soft limit')
@click.option('--gamma', type = int, required = False, default = 2, help = 'Gamma')
@click.option('--climb', type = int, required = False, default = 2500, help = 'Hill climbing iterations')
@click.option('--itemp', type = float, required = False, default = 500, help = 'Initial temperature')
@click.option('--ftemp', type = float, required = False, default = 1e-4, help = 'Final temperature')
@click.option('--cool', type = float, required = False, default = 0.9, help = 'Cooling factor')
@click.option('--iter', type = int, required = False, default = 2500, help = 'Annealing iterations')
@click.option('--strg', type = int, required = False, default = 1, help = 'Perturbation strength')
@click.option('--win', type = int, required = False, default = 10, help = 'PHY-based early-termination window size')
@click.option('--improve', type = str, required = False, default = None, help = 'Archive from previous run (JSON)')
@click.option('--attempts', type=int, default = 0, help="Maximum random-perturbation attempts")
@click.option('--maxtime', type = str, required = False, default = None, help = 'Max duration (hh:mm:ss)')
def runmop(problem, hard, soft, gamma, climb, itemp, ftemp, cool, iter, strg, win, improve, attempts, maxtime):
    """ Run a test problem """
    problem_instance = mop_problems[problem]
    config = pyamosa.Config
    config.archive_hard_limit = hard
    config.archive_soft_limit = soft
    config.archive_gamma = gamma
    config.clustering_max_iterations = 300
    config.hill_climbing_iterations = climb
    config.initial_temperature = itemp
    config.cooling_factor = cool
    config.annealing_iterations = iter
    config.annealing_strength = strg
    config.multiprocessing_enabled = False
    config.hill_climb_checkpoint_file = f"{problem}_hill_climbing_checkpoint.json5"
    config.minimize_checkpoint_file = f"{problem}_minimize_checkpoint.json5"
    config.cache_dir = f".{problem}_cache"
    print(f"Using pyamosa {pyamosa.__version__}")
    optimizer = pyamosa.Optimizer(config)
    if attempts != 0:
        problem_instance.max_attempt = attempts
    termination = pyamosa.CombinedStopCriterion(maxtime, ftemp, win)
    termination.info()
    optimizer.run(problem_instance, termination_criterion = termination, improve = improve)
    print(f"Elapsed time: {str(datetime.timedelta(seconds=optimizer.duration))}")
    print(f"Cache hits:{problem_instance.cache_hits} over {problem_instance.total_calls}")
    optimizer.archive.write_json(f"{problem}_final_archive.json5")
    optimizer.archive.plot_front(problem_instance, f"{problem}_pareto_front.pdf")

@cli.command('lsmop')
@click.argument('problem', type = click.Choice(list(lsmop_problems.keys())), required = True)
@click.argument('nvar', type = int, required = True)
@click.argument('heuristic', type = click.Choice(["DRG", "DVG2"]), required = True)
@click.argument('tso', type = click.Choice(["any", "all"]))
@click.argument('tsv', type = click.Choice(["any", "all"]))
@click.option('--hard', type = int, required = False, default = 100, help = 'Hard limit')
@click.option('--soft', type = int, required = False, default = 200, help = 'Soft limit')
@click.option('--gamma', type = int, required = False, default = 2, help = 'Gamma')
@click.option('--climb', type = int, required = False, default = 2500, help = 'Hill climbing iterations')
@click.option('--itemp', type = float, required = False, default = 500, help = 'Initial temperature')
@click.option('--ftemp', type = float, required = False, default = 1e-4, help = 'Final temperature')
@click.option('--cool', type = float, required = False, default = 0.9, help = 'Cooling factor')
@click.option('--iter', type = int, required = False, default = 2500, help = 'Annealing iterations')
@click.option('--strg', type = int, required = False, default = 1, help = 'Perturbation strength')
@click.option('--win', type = int, required = False, default = 10, help = 'PHY-based early-termination window size')
@click.option('--improve', type = str, required = False, default = None, help = 'Archive from previous run (JSON)')
@click.option('--attempts', type=int, default = 0, help="Maximum random-perturbation attempts")
@click.option('--maxtime', type = str, required = False, default = None, help = 'Max duration (hh:mm:ss)')
def runlsmop(problem, nvar, heuristic, tso, tsv, hard, soft, gamma, climb, itemp, ftemp, cool, iter, strg, win, improve, attempts, maxtime):
    tso_selector = {"all" : pyamosa.VariableGrouping.TSObjective.All, "any": pyamosa.VariableGrouping.TSObjective.Any}
    tsv_selector = {"all" : pyamosa.VariableGrouping.TSVariable.All, "any" : pyamosa.VariableGrouping.TSVariable.Any}
    problem_instance = lsmop_problems[problem](nvar)
    config = pyamosa.Config
    config.archive_hard_limit = hard
    config.archive_soft_limit = soft
    config.archive_gamma = gamma
    config.clustering_max_iterations = 300
    config.hill_climbing_iterations = climb
    config.initial_temperature = itemp
    config.cooling_factor = cool
    config.annealing_iterations = iter
    config.annealing_strength = strg
    config.multiprocessing_enabled = False
    config.hill_climb_checkpoint_file = f"{problem}_{nvar}_{heuristic}_hill_climbing_checkpoint.json5"
    config.minimize_checkpoint_file = f"{problem}_{nvar}_{heuristic}_minimize_checkpoint.json5"
    config.cache_dir = f".{problem}_{nvar}_cache"
    if heuristic == "DRG":
        optimizer = pyamosa.DynamicRandomGroupingOptimizer(config)
    elif heuristic == "DVG2":
        variable_decomposition_cache = f"{heuristic}_{tso}_{tsv}.json5"
        grouper = pyamosa.DifferentialVariableGrouping2(problem_instance)
        if os.path.exists(variable_decomposition_cache):
            grouper.load(variable_decomposition_cache)
        else:
            grouper.run(tso_selector[tso], tsv_selector[tsv])
            grouper.store(variable_decomposition_cache)
        optimizer = pyamosa.GenericGroupingOptimizer(config, grouper)
    if attempts != 0:
        problem_instance.max_attempt = attempts
    termination = pyamosa.CombinedStopCriterion(maxtime, ftemp, win)
    termination.info()
    optimizer.run(problem_instance, termination_criterion = termination, improve = improve)
    print(f"Elapsed time: {str(datetime.timedelta(seconds=optimizer.duration))}")
    print(f"Cache hits:{problem_instance.cache_hits} over {problem_instance.total_calls}")
    optimizer.archive.write_json(f"{problem}_{nvar}_{heuristic}_final_archive.json5")
    optimizer.archive.plot_front(problem_instance, f"{problem}_{nvar}_{heuristic}_pareto_front.pdf")

@cli.command('lsmopeval')
@click.argument('prob', type = click.Choice(list(mop_problems.keys())), required = True)
@click.argument('nvar', type = int, required = True)
@click.argument('pareto', type = click.Path(exists=True, dir_okay=False))
def lsmopeval(problem, nvar, pareto):
    problem = lsmop_problems[problem](nvar)
    opt = problem.optimums()
    archive = json5.load(open(pareto))
    real_pareto = np.array([s["f"] for s in opt])
    est_pareto = np.array([s["f"] for s in archive])
    axis_labels = ["f0", "f1"]
    plt.figure(figsize = (10, 10), dpi = 300)
    plt.plot(real_pareto[:, 0], real_pareto[:, 1], 'r.', label="Actual Pareto-front")
    plt.plot(est_pareto[:, 0], est_pareto[:, 1], 'b.', label="Estimation from AMOSA")
    plt.xlabel(axis_labels[0])
    plt.ylabel(axis_labels[1])
    plt.legend()
    plt.savefig(f"{problem}_pareto_comparison.pdf", bbox_inches = 'tight', pad_inches = 0)
    print(f"convergence: {convergence(real_pareto, est_pareto)}")
    print(f"dispersion: {dispersion(real_pareto, est_pareto)}")
    

cli.add_command(mopeval)
cli.add_command(runmop)
cli.add_command(runlsmop)
cli.add_command(lsmopeval)

if __name__ == '__main__':
    cli()
